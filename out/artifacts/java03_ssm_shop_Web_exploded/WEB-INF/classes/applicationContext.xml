<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--spring 配置文件  配置和业务逻辑有关的-->

    <context:component-scan base-package="crud"></context:component-scan>

    <!-- ========== 数据源 事务控制 =======-->

    <context:property-placeholder location="classpath:dbconfig.properties"></context:property-placeholder>
    <bean id="PooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
        <property name="driverClass" value="${jdbc.driverClass}"></property>
        <property name="user" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

<!--   ====== 配置和MyBatis的整合 =========-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
<!--        指定MyBatis 全局配置文件的位置-->
        <property name="configLocation" value="classpath:MyBatis-config.xml"></property>
        <property name="dataSource" ref="PooledDataSource"></property>
<!--       指定MyBatis,mapper文件的位置-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

<!--    配置扫描器，将MaBatis 接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--       扫描所有的 dao接口的实现 加入到ioc容器中-->
        <property name="basePackage" value="crud.dao"></property>
    </bean>
    <!--============================-->

<!--    配置一个可以执行批量的sqlSession-->
    <bean id="SqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>


<!--   ========== 事务控制的配置 =============-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        控制住数据源-->
        <property name="dataSource" ref="PooledDataSource"></property>
    </bean>

<!--    开启注解的事务，或者 xml配置形式的事务 （主要是xml配置）-->
    <aop:config>
<!--        切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* crud.service..*(..))"/>
<!--        配置事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

<!--    配置事务增强，事务如何启动-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
       <tx:attributes>
<!--            所有方法都是事务方法-->
           <tx:method name="*"/>
<!--           以get开始的所有方法-->
            <tx:method name="get*" read-only="true"/>
       </tx:attributes>
    </tx:advice>

    <!--Spring配置文件的核心点 （数据源、与Mybatis的整合，事务控制）-->

</beans>